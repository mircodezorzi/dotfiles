#+BEGIN_SRC emacs-lisp
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC

* General

** Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Mirco De Zorzi"
      user-mail-address "mircodezorzi@protonmail.com")
#+END_SRC

** Performance Tweaks
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 101
      gc-cons-threshold 100000000)
#+END_SRC

* Doom Configuration

** Font Face
#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Fira Code" :size 20)
      doom-big-font (font-spec :family "Fira Code" :size 30)
      doom-mixed-pitch-font (font-spec :family "Overpass" :size 30))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'line-number-current-line nil :inherit '(fixed-pitch))
(set-face-attribute 'line-number nil :inherit '(fixed-pitch))
#+END_SRC

** Modeline & Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-tomorrow-night)
#+END_SRC

Thanks to [[https://tecosaur.github.io/emacs-config/config.html#theme-modeline][tecosaur]] from whom I stole the following two snippets of code.

#+BEGIN_SRC emacs-lisp
(display-time-mode 1)                        ; enable time in the mode-line
(unless (equal "Battery status not avalible" ; enable battery in the mode-line
               (battery))
  (display-battery-mode 1))
#+END_SRC

This function allows to hide a files' encoding whenever there's no need to display it.

#+BEGIN_SRC emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case."
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+END_SRC

** Miscellaneous

Dispaly relative number lines. Essential for any =evil= user!

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

Display indent guides as dotted lines. We also have to fix an issue with the faces at startup.

#+BEGIN_SRC emacs-lisp
(after! highlight-indent-guides
  (setq highlight-indent-guides-method 'bitmap)
  (highlight-indent-guides-auto-set-faces))
#+END_SRC

I'm not a big fan of other conceal characters so I'm only keeping the lambda one.

#+BEGIN_SRC emacs-lisp
(setq +pretty-code-symbols '(:lambda "λ"))
#+END_SRC

More intuitive splits.

#+BEGIN_SRC emacs-lisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+END_SRC

Automatically toggle fullscreen mode when loading up Emacs. This applies to =emacsclient -c= too.

#+BEGIN_SRC emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC

* Package Configuration

** Evil Mode
#+BEGIN_SRC emacs-lisp
(evil-mode t)
#+END_SRC

** Key Chord

Enter =normal mode= whenever =u= & =e= are pressed simultaneusly.

#+BEGIN_SRC emacs-lisp
(setq key-chord-two-keys-delay 0.025)
(key-chord-define evil-insert-state-map "eu" 'evil-normal-state)
(key-chord-mode 1)
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (add-hook 'evil-normal-state-entry-hook #'company-abort))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(map!
  :after company
  :map company-mode-map
  :nvm (kbd "C-SPC") #'company-complete-selection)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(map!
  :leader
  :after company
  :map company-mode-map
  :nvm (kbd "C-H") #'lsp-ui-doc-show)
#+END_SRC

Fancy floating pop-up windows for code documentitation. Stolen from [[https://emacs.nasy.moe/#org66a6e8e][Nasy]].

#+BEGIN_SRC emacs-lisp
(setq lsp-ui-doc-position              'at-point
      lsp-ui-doc-header                nil
      lsp-ui-doc-border                "violet"
      lsp-ui-doc-include-signature     t
      lsp-ui-flycheck-enable           t)
#+END_SRC

** Yasnippet

#+BEGIN_SRC emacs-lisp
(setq yas-snippet-dirs '("~/.doom.d/snippets"))
#+END_SRC

** Nerd Commenter

#+BEGIN_SRC emacs-lisp
(map!
  :leader
  :nvm (kbd "c c") #'evilnc-comment-or-uncomment-lines
  :nvm (kbd "c p") #'evilnc-comment-or-uncomment-paragraphs)
#+END_SRC

** Evil Snipe

Disable =evil-snipe-mode= due to key map conflicts.

#+BEGIN_SRC emacs-lisp
(after! evil-snipe
  (evil-snipe-mode -1))
#+END_SRC

* Languages

** LaTeX

*** Compilation

#+BEGIN_SRC emacs-lisp
(after! latex
  (setq TeX-save-query nil
        TeX-command-extra-options "-shell-escape"))
#+END_SRC

*** Custom Viewers

#+BEGIN_SRC emacs-lisp
(after! latex
  (setq +latex-viewers '(pdf-tools zathura)))
#+END_SRC

*** Dictionaries

#+BEGIN_SRC emacs-lisp
(setq ispell-dictionary "en-custom")
#+END_SRC

** Org-Mode

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/")
#+END_SRC

Prettify some symbols.

#+BEGIN_SRC emacs-lisp
(after! org
  (appendq! +pretty-code-symbols
            `(:src_block     "»"
              :src_block_end "«"
              :results       "⟹"
              :checkbox      "☐"
              :pending       "◼"
              :checkedbox    "☑"
              :priority_a      ,(propertize "⚑" 'face 'all-the-icons-red)
              :priority_b      ,(propertize "⚑" 'face 'all-the-icons-orange)
              :priority_c      ,(propertize "⚑" 'face 'all-the-icons-yellow))))

(after! org
  (set-pretty-symbols! 'org-mode
    :merge t
    :src_block     "#+BEGIN_SRC"
    :src_block_end "#+END_SRC"
    :results       "#+RESULTS:"
    :checkbox      "[ ]"
    :pending       "[-]"
    :checkedbox    "[X]"
    :priority_a    "[#A]"
    :priority_b    "[#B]"
    :priority_c    "[#C]"))

(plist-put +pretty-code-symbols :name "foobar")
#+END_SRC

Stolen from [[https://tecosaur.github.io/emacs-config/config.html#stolen-from-scimax][tecosaur]], which in turn stole it from [[https://github.com/jkitchin/scimax][scimax]].

Numbered equations all have (1) as the number for fragments with vanilla org-mode. This code injects the correct numbers into the previews so they look good.

#+BEGIN_SRC emacs-lisp
(after! org
  (defun scimax-org-renumber-environment (orig-func &rest args)
    "A function to inject numbers in LaTeX fragment previews."
    (let ((results '())
          (counter -1)
          (numberp))
      (setq results (loop for (begin .  env) in
                          (org-element-map (org-element-parse-buffer) 'latex-environment
                            (lambda (env)
                              (cons
                               (org-element-property :begin env)
                               (org-element-property :value env))))
                          collect
                          (cond
                           ((and (string-match "\\\\begin{equation}" env)
                                 (not (string-match "\\\\tag{" env)))
                            (incf counter)
                            (cons begin counter))
                           ((string-match "\\\\begin{align}" env)
                            (prog2
                                (incf counter)
                                (cons begin counter)
                              (with-temp-buffer
                                (insert env)
                                (goto-char (point-min))
                                ;; \\ is used for a new line. Each one leads to a number
                                (incf counter (count-matches "\\\\$"))
                                ;; unless there are nonumbers.
                                (goto-char (point-min))
                                (decf counter (count-matches "\\nonumber")))))
                           (t
                            (cons begin nil)))))

      (when (setq numberp (cdr (assoc (point) results)))
        (setf (car args)
              (concat
               (format "\\setcounter{equation}{%s}\n" numberp)
               (car args)))))

    (apply orig-func args))


  (defun scimax-toggle-latex-equation-numbering ()
    "Toggle whether LaTeX fragments are numbered."
    (interactive)
    (if (not (get 'scimax-org-renumber-environment 'enabled))
        (progn
          (advice-add 'org-create-formula-image :around #'scimax-org-renumber-environment)
          (put 'scimax-org-renumber-environment 'enabled t)
          (message "Latex numbering enabled"))
      (advice-remove 'org-create-formula-image #'scimax-org-renumber-environment)
      (put 'scimax-org-renumber-environment 'enabled nil)
      (message "Latex numbering disabled.")))

  (advice-add 'org-create-formula-image :around #'scimax-org-renumber-environment)
  (put 'scimax-org-renumber-environment 'enabled t))
#+END_SRC


* Dvorak Mappings

As a Dvorak user I have to manually remap a large amount of keys.

** Calendar

#+BEGIN_SRC emacs-lisp
(map!
  :after calendar
  :map calendar-mode-map
  :nvm (kbd "d") #'calendar-backward-day
  :nvm (kbd "h") #'calendar-forward-week
  :nvm (kbd "t") #'calendar-backward-week
  :nvm (kbd "n") #'calendar-forward-day)
#+END_SRC

** TODO Treemacs

For some reason Doom really doesn't want to remap Treemacs keys...

#+BEGIN_SRC emacs-lisp
(map!
  :after treemacs
  :map treemacs-mode-map
  :nvm (kbd "h") #'treemacs-next-line
  :nvm (kbd "t") #'treemacs-previous-line)
#+END_SRC

** Notmuch

#+BEGIN_SRC emacs-lisp
(map!
  :after notmuch
  :map notmuch-search-mode-map
  :nvm "d" #'evil-backward-char
  :nvm "t" #'evil-previous-line
  :nvm "C-t" #'evil-window-up)
#+END_SRC

** Org-Mode

#+BEGIN_SRC emacs-lisp
(map!
  :after evil-org
  :map evil-org-mode-map
  :nvm "d" #'evil-backward-char
  :nvm (kbd "M-t") #'org-metaup
  :nvm (kbd "M-h") #'org-metadown)
#+END_SRC

** Evil Mode

*** HJKL movement

Remap =dhtn= to =hjkl= and =DHTN= to sligthly faster movements.

#+BEGIN_SRC emacs-lisp
(map!
  :nvm "d" #'evil-backward-char
  :nvm "n" #'evil-forward-char
  :nvm "h" #'evil-next-line
  :nvm "t" #'evil-previous-line

  :nvm "D" #'evil-beginning-of-line
  :nvm "N" #'evil-end-of-line
  :nvm "H" (kbd "5h")
  :nvm "T" (kbd "5t"))
#+END_SRC

We also have to fix some mapping that we overwrote.

#+BEGIN_SRC emacs-lisp
(map!
  :nvm "j" #'evil-delete
  :nvm "k" #'evil-find-char-to

  :nvm "l" #'evil-search-next
  :nvm "L" #'evil-search-previous)
#+END_SRC


*** Window Movements

Move through splits with =C-{DHTN}=

#+BEGIN_SRC emacs-lisp
(map!
  :nvm "C-d" #'evil-window-left
  :nvm "C-h" #'evil-window-down
  :nvm "C-t" #'evil-window-up
  :nvm "C-n" #'evil-window-right)
#+END_SRC

*** Other

#+BEGIN_SRC emacs-lisp
(map!
  :nvm "M-+" #'doom/increase-font-size
  :nvm "M--" #'doom/decrease-font-size
 
  :nvm "C-k" #'evil-insert-digraph

  :nvm "s" #'evil-ex)
#+END_SRC

* Utility Functions

** Wrap Selected Code

Wrap text in an org-mode block.

#+BEGIN_SRC emacs-lisp
(defun org-wrap-source ()
  (interactive)
  (let ((lang (read-string "Language: "))
        (start (min (point) (mark)))
        (end (max (point) (mark))))
    (goto-char end)
    (unless (bolp)
      (newline))
    (insert "#+END_SRC\n")
    (goto-char start)
    (unless (bolp)
      (newline))
    (insert (format "#+BEGIN_SRC %s\n" lang))))

(map!
  :v (kbd "C-C C-W") #'org-wrap-source)
#+END_SRC

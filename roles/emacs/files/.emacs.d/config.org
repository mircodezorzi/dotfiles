#+TITLE: Emacs Configuration
#+AUTHOR: Mirco De Zorzi
#+EMAIL: mircodezorzi@protonmail.com

* General
** Startrup optimizations stolen from Doom
#+BEGIN_SRC emacs-lisp
(defvar last-file-name-handler-alist file-name-handler-alist)
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6
      file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1
        file-name-handler-alist last-file-name-handler-alist))
#+END_SRC

** Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Mirco De Zorzi"
      user-mail-address "mircodezorzi@protonmail.com")
#+END_SRC

** Display battery in modeline
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
(unless (equal "Battery status not avalible"
               (battery))
  (display-battery-mode 1))
#+END_SRC

** Indent Guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :config
  (setq highlight-indent-guides-method 'character
        highlight-indent-guides-character ?\│)
  :hook (prog-mode . highlight-indent-guides-mode))
#+END_SRC

** Cursorline
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

** Indentation
#+BEGIN_SRC emacs-lisp
(setq-default
    indent-tabs-mode t
    tab-width 2)
#+END_SRC

** Remove unecessary UI
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Relative line numbers
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :config
  (setq linum-relative-backend 'display-line-numbers-mode
        linum-relative-current-symbol "")
  :hook (prog-mode . display-line-numbers-mode))
#+END_SRC

** Key chords
#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :config
  (key-chord-mode 1)
  (key-chord-define-global "eu" 'evil-normal-state))
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :config
  (load-theme 'base16-tomorrow-night t))
#+END_SRC

** Workgroups
#+BEGIN_SRC emacs-lisp
(use-package workgroups2)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(use-package mixed-pitch
  :hook
  ((text-mode . mixed-pitch-mode)
   (text-mode . visual-line-mode)))

(set-face-attribute 'default nil :font "IBM Plex Mono-14")
(set-face-attribute 'fixed-pitch nil :font "IBM Plex Mono-12")
(set-face-attribute 'variable-pitch nil :font "IBM Plex Sans-12")
#+END_SRC

** General(.el)
#+BEGIN_SRC emacs-lisp
(use-package general
  :config
    (general-override-mode))
#+END_SRC

* Language Server
** lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp
  :bind (:map evil-normal-state-map
          ("g r" . lsp-find-references)
          ("SPC s" . swiper-isearch))
  :config
  (setq lsp-eldoc-hook nil)
  :hook ((c++-mode-hook . lsp)
         (c-mode-hook . lsp)
         (go-mode-hook . lsp)
         (latex-mode-hook . lsp)
         (python-mode-hook . lsp)))
#+END_SRC

** lsp-ui
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-enable    t
        lsp-ui-doc-position  'at-point
        lsp-ui-doc-border    "white"))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :commands company-lsp
  :config
  (setq company-minimum-prefix-length 1)
  (push 'company-lsp company-backends))
#+END_SRC

* Languages
** C++
#+BEGIN_SRC emacs-lisp
(use-package ccls
  :config
  (setq ccls-executable "ccls"
        lsp-prefer-flymake nil)
  (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
  :hook ((c-mode c++-mode objc-mode) .
    (lambda () (require 'ccls) (lsp))))
#+END_SRC

*** XRefs
#+BEGIN_SRC emacs-lisp
(use-package ivy-xref
  :config
  (setq xref-show-definitions-function #'ivy-xref-show-defs
        xref-show-xrefs-function       #'ivy-xref-show-xrefs))
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(use-package lsp-python-ms
  :config
  (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . 
    (lambda () (require 'lsp-python-ms) (lsp))))
#+END_SRC

** Golang
#+BEGIN_SRC emacs-lisp
(use-package go-mode)

(use-package company-go
  :init

  (setq company-go-show-annotation t)
  (setq company-tooltip-limit 20)
  :hook (go-mode .
            (lambda ()
              (set (make-local-variable 'company-backends) '(company-go))
              (company-mode))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package go-eldoc
  :defer t
  :hook (go-mode . go-eldoc-setup))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package go-guru
  :defer t
  :hook (go-mode . go-guru-hl-identifier-mode))
#+END_SRC

* File Types
** Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-directory "~/org"))
  (add-to-list 'org-src-lang-modes '("x86asm" . asm))
  :hook (org-mode . org-indent-mode)
#+END_SRC

*** Prettify Bullet Points
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :custom
  (org-ellipsis "⤵")
  :hook (org-mode . org-bullets-mode))
#+END_SRC

*** Darken Code Blocks
#+BEGIN_SRC emacs-lisp
(require 'color)

(set-face-attribute 'org-block nil
  :background (color-darken-name (face-attribute 'default :background) 3)
  :extend t)
#+END_SRC

** LaTeX
#+BEGIN_SRC emacs-lisp
(use-package company-auctex)
(use-package company-math)

(add-hook 'LaTeX-mode-hook 'TeX-fold-mode)
(add-hook 'LaTeX-mode-hook 'latex-math-mode)
(add-hook 'LaTeX-mode-hook 'TeX-fold-buffer t)
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml$" . yaml-mode))
#+END_SRC

* Evil Mode
#+BEGIN_SRC emacs-lisp
(use-package evil
  :config
  (evil-mode)

  (setq ; Indenting
        evil-shift-width                2
	
				; Scrolling
				scroll-step                     1
				scroll-conservatively           10000

        ; Evil settings
        evil-search-module              'evil-search
        evil-ex-complete-emacs-commands nil
        evil-shift-round                nil
        evil-vsplit-window-right        t
        evil-split-window-below         t
        evil-want-C-u-scroll            t

        ; Avoid popup wrong positioning
				popup-use-optimized-column-computation nil)

  (general-define-key
    :states '(normal visual motion)
      "d" 'evil-backward-char
      "n" 'evil-forward-char
      "h" 'evil-next-line
      "t" 'evil-previous-line

      "s" 'evil-ex

      "j" 'evil-delete
      "k" 'evil-find-char-to

      "l" 'evil-search-next
      "L" 'evil-search-previous

      "D" 'evil-beginning-of-line
      "N" 'evil-end-of-line
      "H" (kbd "5h")
      "T" (kbd "5t")

      "C-d" 'evil-window-left
      "C-h" 'evil-window-down
      "C-t" 'evil-window-up
      "C-n" 'evil-window-right))
#+END_SRC

* Tools
** Undo Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :after evil
  :config
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree))
#+END_SRC

** Ivy/Counsel/Swiper
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :bind (:map ivy-mode-map
          ("C-'" . ivy-avy))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers   t
        ivy-height                10
        ivy-count-format          ""
        ivy-initial-inputs-alist  nil
        ivy-re-builders-alist     '((t . ivy--regex-ignore-order))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (:map evil-normal-state-map
          ("SPC SPC" . counsel-M-x)
          ("C-p" . counsel-projectile-find-file)))
#+END_SRC



#+BEGIN_SRC emacs-lisp
(use-package swiper)
#+END_SRC


#+BEGIN_SRC emacs-lisp
(defun dz/find-files-at (dir)
     (interactive)
     (let ((default-directory dir))
       (helm-find-files nil)))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode)

  (setq projectile-enable-caching     t
        projectile-completion-system 'ivy))

(use-package counsel-projectile)
#+END_SRC

** VTerm
#+BEGIN_SRC emacs-lisp
(use-package vterm
 :preface (setq vterm-install t))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC
* dz/ functions
** Wrap Org Source Code Blocks
#+BEGIN_SRC emacs-lisp
(setq def-language "")

(defun dz/org-wrap-source ()
  (interactive)
  (let ((lang (read-string (format "Language [%s]: " def-language) nil nil def-language))
        (start (min (point) (mark)))
        (end (max (point) (mark))))
    (goto-char end)
    (unless (bolp)
      (newline))
    (insert "#+END_SRC\n")
    (goto-char start)
    (unless (bolp)
      (newline))
    (setq def-language lang)
    (insert (format "#+BEGIN_SRC %s\n" def-language))))

(define-key evil-visual-state-map (kbd "C-c w") 'dz/org-wrap-source)
#+END_SRC

** Reload Configuration
#+BEGIN_SRC emacs-lisp
(defun dz/reload ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/config.org"))

(define-key evil-normal-state-map (kbd "SPC r") 'dz/reload)
#+END_SRC

** Open Configuration
#+BEGIN_SRC emacs-lisp
(defun dz/open-config ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))
#+END_SRC

** Open Org Directory
#+BEGIN_SRC emacs-lisp
(defun dz/open-org ()
  (interactive)
  (find-file "~/org"))
#+END_SRC


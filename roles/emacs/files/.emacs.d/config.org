#+TITLE: Emacs Configuration
#+AUTHOR: Mirco De Zorzi

* General
** Startrup optimizations stolen from Doom
#+BEGIN_SRC emacs-lisp
(defvar last-file-name-handler-alist file-name-handler-alist)
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6
      file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1
        file-name-handler-alist last-file-name-handler-alist))
#+END_SRC

** Personal Information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Mirco De Zorzi"
      user-mail-address "mircodezorzi@protonmail.com")
#+END_SRC

** Display battery in modeline
#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
(unless (equal "Battery status not avalible"
               (battery))
  (display-battery-mode 1))
#+END_SRC

** Indent Guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :config
  ;; Indent character samples: | ┆ ┊
  (setq highlight-indent-guides-method 'character
        highlight-indent-guides-character ?\▏)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+END_SRC

** Remove unecessary UI
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(menu-bar-mode -1)
#+END_SRC

** Relative line numbers
#+BEGIN_SRC emacs-lisp
(use-package linum-relative
  :init
    (setq linum-relative-backend 'display-line-numbers-mode
          linum-relative-current-symbol ""))

(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(use-package base16-theme
  :config
    (load-theme 'base16-tomorrow-night t))
#+END_SRC

** Workgroup
#+BEGIN_SRC emacs-lisp
(use-package workgroups2)
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
(use-package mixed-pitch
  :hook
  ((text-mode . mixed-pitch-mode)
   (text-mode . visual-line-mode)))


(set-face-attribute 'default nil :font "Source Code Pro-12")
(set-face-attribute 'fixed-pitch nil :font "Source Code Pro-12")
(set-face-attribute 'variable-pitch nil :font "Fira Code-14")
#+END_SRC

** Faces
#+BEGIN_SRC emacs-lisp
(require 'color)

;(set-face-attribute 'org-block-begin-line nil
;  :inherit 'normal
;  :underline "#A7A6AA"
;  :extend t)

(set-face-attribute 'org-block nil
  :background (color-darken-name (face-attribute 'default :background) 3)
  :extend t)

;(set-face-attribute 'org-block-end-line nil
;  :inherit 'normal
;  :overline "#A7A6AA"
;  :extend t)
#+END_SRC

* General(.el)
#+BEGIN_SRC emacs-lisp
(use-package general
  :config
    (general-override-mode))
#+END_SRC

* Language Server
*** lsp-mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp
  :config
    (add-hook 'c++-mode-hook #'lsp)
    (add-hook 'c-mode-hook #'lsp)
    (add-hook 'go-mode-hook #'lsp)
    (add-hook 'latex-mode-hook #'lsp)
    (add-hook 'python-mode-hook #'lsp)

    (setq lsp-eldoc-hook nil)
    (setq company-minimum-prefix-length 1))
#+END_SRC

*** lsp-ui
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :commands lsp-ui-mode
  :config
  (setq
      lsp-ui-doc-enable                t
      lsp-ui-doc-position              'at-point
      lsp-ui-doc-border                "white"))
#+END_SRC

*** company
#+BEGIN_SRC emacs-lisp
(use-package company-lsp
  :commands company-lsp
  :config
  (push 'company-lsp company-backends))
#+END_SRC

* File Types
** Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-directory "~/org"))
#+END_SRC

** LaTeX
#+BEGIN_SRC emacs-lisp
(use-package company-auctex)
(use-package company-math)

(add-hook 'LaTeX-mode-hook 'TeX-fold-mode)
(add-hook 'LaTeX-mode-hook 'latex-math-mode)
(add-hook 'LaTeX-mode-hook 'TeX-fold-buffer t)
#+END_SRC

** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode ("\\.yml$" . yaml-mode))
#+END_SRC

* Languages
*** C++
#+BEGIN_SRC emacs-lisp
(use-package ccls
  :config
  (setq ccls-executable "ccls"
        lsp-prefer-flymake nil)
  (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
  :hook ((c-mode c++-mode objc-mode) .
    (lambda () (require 'ccls) (lsp))))
#+END_SRC

*** Python

#+BEGIN_SRC emacs-lisp
(use-package lsp-python-ms
  :init (setq lsp-python-ms-auto-install-server t)
  :config

  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))
#+END_SRC

*** Golang

#+BEGIN_SRC emacs-lisp
(use-package go-mode)

(use-package company-go
  :init

    (setq company-go-show-annotation t)
    (setq company-tooltip-limit 20)
    (add-hook 'go-mode-hook
              (lambda ()
                (set (make-local-variable 'company-backends) '(company-go))
                (company-mode))))

(use-package go-eldoc
  :config
    (add-hook 'go-mode-hook 'go-eldoc-setup))

(use-package go-guru
  :defer t
  :hook (go-mode . go-guru-hl-identifier-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq indent-tabs-mode nil
      inhibit-startup-screen t
      tab-width 2)
(global-hl-line-mode t)
#+END_SRC

* Evil Mode
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq ; Indenting
        indent-tabs-mode nil
        tab-width        2
        evil-shift-width 2
	
	; Scrolling
	scroll-step            1
	scroll-conservatively  10000

        ; Evil settings
        evil-search-module              'evil-search
        evil-ex-complete-emacs-commands nil
        evil-vsplit-window-right        t
        evil-split-window-below         t
        evil-shift-round                nil
        evil-want-C-u-scroll            t

        ; Avoid popup wrong positioning
	popup-use-optimized-column-computation nil)
  :config
    (evil-mode)

    (general-define-key
      :states '(normal visual motion)
      "d" 'evil-backward-char
      "n" 'evil-forward-char
      "h" 'evil-next-line
      "t" 'evil-previous-line

      "s" 'evil-ex

      "j" 'evil-delete
      "k" 'evil-find-char-to

      "l" 'evil-search-next
      "L" 'evil-search-previous

      "D" 'evil-beginning-of-line
      "N" 'evil-end-of-line
      "H" (kbd "5h")
      "T" (kbd "5t")

      "C-d" 'evil-window-left
      "C-h" 'evil-window-down
      "C-t" 'evil-window-up
      "C-n" 'evil-window-right))
#+END_SRC

* Tools
** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :config
    (define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
    (define-key evil-normal-state-map (kbd "SPC SPC") 'helm-M-x)
    (define-key evil-normal-state-map (kbd "C-p") 'helm-find-files))

(use-package projectile
  :general
  (:states '(normal)
   :prefix "SPC"
   "s" 'projectile-switch-project)

  :config
  (projectile-global-mode)
  (setq projectile-enable-caching t
	projectile-completion-system 'helm))

(use-package helm-projectile
  :general
  (:states '(normal)
   :prefix "SPC"
   "f" 'helm-projectile-find-file)

  :config
  (helm-projectile-on))

(use-package helm-ag
  :general
  (:states '(normal)
   :prefix "SPC"
   "p" 'helm-projectile-ag)

  :commands
  (helm-ag helm-projectile-ag)

  :init
  (setq helm-ag-insert-at-point 'symbol
	helm-ag-command-option "--path-to-ignore ~/.agignore"))

(use-package helm-swoop
  :general
  (:states '(normal)
   :prefix "SPC"
   "t" 'helm-swoop))

(defun dz/find-files-at (dir)
     (interactive)
     (let ((default-directory dir))
       (helm-find-files nil)))

(define-key evil-normal-state-map (kbd "C-f") 'helm-swoop)
#+END_SRC

** Dired
#+BEGIN_SRC emacs-lisp
(general-define-key
  :keymaps 'dired-mode-map
  "d" 'dired-up-directory
  "t" 'evil-previous-line
  "h" 'evil-next-line
  "n" 'dired-view-file)
#+END_SRC

** VTerm
 #+BEGIN_SRC emacs-lisp
 (use-package vterm
   :preface (setq vterm-install t))
 #+END_SRC

* Other Custom Functions
#+BEGIN_SRC emacs-lisp
(defun dz/org-wrap-source ()
  (interactive)
  (let ((lang (read-string "Language: "))
        (start (min (point) (mark)))
        (end (max (point) (mark))))
    (goto-char end)
    (unless (bolp)
      (newline))
    (insert "#+END_SRC\n")
    (goto-char start)
    (unless (bolp)
      (newline))
    (insert (format "#+BEGIN_SRC %s\n" lang))))

(define-key evil-visual-state-map (kbd "C-c w") 'dz/org-wrap-source)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun dz/reload ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/config.org"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun dz/open-config ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package key-chord
  :config
  (key-chord-define-global "BB" 'iswitchb)
  (key-chord-define-global "FF" 'find-file)
  (key-chord-define-global "jk" 'beginning-of-buffer)
  (key-chord-mode +1)
#+END_SRC

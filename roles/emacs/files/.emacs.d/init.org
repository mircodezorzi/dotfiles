#+TITLE: Emacs Configuration
#+AUTHOR: Mirco De Zorzi
#+EMAIL: mircodezorzi@protonmail.com
#+DATE: 2021-01-26

* Introduction
[[https://mircodezorzi.github.io/doc/emacs-configuration/210520-1305-53.png]]

What follows is my literate emacs configuration. Feel free to copy any snippet you wish, as I did with many other configuration over the past year or so.

* Meta
Enable lexical scoping for the current file.
#+BEGIN_SRC lisp :tangle yes
;;; -*- lexical-binding: t -*-
#+END_SRC

Enable native compilation
#+BEGIN_SRC lisp :tangle yes
(setq package-native-compile t)
#+END_SRC

Automatically update configuration file when saving the document.
#+BEGIN_SRC lisp :tangle yes
(setq user-emacs-directory "~/code/dotfiles/roles/emacs/files/.emacs.d/")

(defun tangle-init ()
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

Tweak garbage collection configuration during initialization.
#+BEGIN_SRC lisp :tangle yes
(defvar last-file-name-handler-alist file-name-handler-alist)
(setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6
      file-name-handler-alist nil)
(add-hook 'emacs-startup-hook
  (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1
        file-name-handler-alist last-file-name-handler-alist))
#+END_SRC

* Packages
#+BEGIN_SRC lisp :tangle yes
(require 'package)
(package-initialize)
#+END_SRC

Include extra package repositories.
#+BEGIN_SRC lisp :tangle yes
(setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
#+END_SRC

Install =use-package= package manager.
#+BEGIN_SRC lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
(setf use-package-always-ensure t)
#+END_SRC

In case some packages are missing, install them.
#+BEGIN_SRC lisp :tangle yes
(let* ((package--builtins nil)
       (packages
        '(auctex
          all-the-icons
          base16-theme
          beacon
          ccls
          company-auctex
          company-box
          company-go
          company-lsp
          company-math
          company-posframe
          company-web
          counsel
          counsel-projectile
          dockerfile-mode
          emmet-mode
          evil
          general
          go-eldoc
          go-guru
          go-mode
          highlight-indent-guides
          ivy
          ivy-xref
          key-chord
          lsp-mode
          lsp-python-ms
          lsp-treemacs
          lsp-ui
          magit
          mixed-pitch
          org
          ormolu
          ox-hugo
          pdf-tools
          ialign
          dimmer
          projectile
          protobuf-mode
          swiper
          tide
          toml-mode
          treemacs
          treemacs-all-the-icons
          treemacs-projectile
          undo-tree
          use-package
          vterm
          vterm-toggle
          web-mode
          yasnippet-snippets
          yaml-mode)))
  (let ((packages (seq-remove 'package-installed-p packages)))
    (when packages
      ;; Install uninstalled packages.
      (package-refresh-contents)
      (mapc 'package-install packages))))
#+END_SRC

* General
** Personal information
#+BEGIN_SRC lisp :tangle yes
(setq user-full-name    "Mirco De Zorzi"
      user-mail-address "mircodezorzi@protonmail.com")
#+END_SRC

** Reduce filesystem clutter
#+BEGIN_SRC lisp :tangle yes
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/"))

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))

;; Don't generate lock files. Prevents Angular from breaking.
(setq create-lockfiles nil)
#+END_SRC

** Cleanup UI
#+BEGIN_SRC lisp :tangle yes
(dolist (mode
         '(menu-bar-mode
           tool-bar-mode       
           tooltip-mode
           scroll-bar-mode     
           blink-cursor-mode)) 
  (funcall mode 0))
#+END_SRC

** Saner defaults
#+BEGIN_SRC lisp :tangle yes
(setq inhibit-startup-screen    t
      initial-scratch-message   nil
      sentence-end-double-space nil
      use-dialog-box            nil
      mark-even-if-inactive     nil
      kill-whole-line           t
      case-fold-search          nil)

(set-face-attribute 'default nil :font "Source Code Pro 14")
(setq electric-indent-inhibit t)
(setq-default indent-tabs-mode nil)
(defalias 'yes-or-no-p 'y-or-n-p) ;; Accept 'y' in lieu of 'yes'.
#+END_SRC

** Beacon
#+BEGIN_SRC lisp :tangle yes
(use-package beacon
  :config
  (beacon-mode 1)
  :custom
  (beacon-blink-when-window-changes t) ;; Only flash on window/buffer changes.
  (beacon-blink-when-window-scrolls nil)
  (beacon-blink-when-point-moves    nil)
  (beacon-blink-duration            .2)
  (beacon-blink-delay               .2)   
  (beacon-size                      20))
#+END_SRC

** Theme
#+BEGIN_SRC lisp :tangle yes
(defun dz/dark-theme ()
  (interactive)
  (dolist (i custom-enabled-themes)
      (disable-theme i))
  (load-theme 'base16-gruvbox-material-dark-medium t))
#+END_SRC

When working on org and latex documents I like to use the default Emacs light theme.
#+BEGIN_SRC lisp :tangle yes
(defun dz/light-theme ()
  (interactive)
  (dolist (i custom-enabled-themes)
      (disable-theme i))
  (load-theme 'base16-atelier-forest-light t))
#+END_SRC

Use dark theme by default.
#+BEGIN_SRC lisp :tangle yes
(use-package base16-theme
  :config (dz/dark-theme))
#+END_SRC

** Display battery in modeline
#+BEGIN_SRC lisp :tangle yes
(display-time-mode 1)
(unless (equal "Battery status not avalible"
               (battery))
  (display-battery-mode 1))
#+END_SRC

** Indent guides
#+BEGIN_SRC lisp :tangle yes
(use-package highlight-indent-guides
  :hook (prog-mode . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character))
#+END_SRC

** Cursorline
#+BEGIN_SRC lisp :tangle yes
(global-hl-line-mode t)
#+END_SRC

** Indentation
#+BEGIN_SRC lisp :tangle yes
(setq-default
    electric-indent-inhibit t ;; Disable annoying indentation behaviour.
    indent-tabs-mode        nil
    tab-width               2
    evil-shift-width        2)
#+END_SRC

Stolen from [[http://blog.binchen.org/posts/easy-indentation-setup-in-emacs-for-web-development.html][binchen]]
#+BEGIN_SRC lisp :tangle yes
(defun dz/indent-setup (n)
  ;; java/c/c++
  (setq-local c-basic-offset n)
  ;; web development
  (setq-local web-mode-markup-indent-offset n
              web-mode-css-indent-offset    n
              web-mode-code-indent-offset   n))

(defun dz/indent-tabs ()
  (interactive)
  (setq-local indent-tabs-mode t) ;; Use tab instead of space.
  (dz/indent-setup 2))            ;; Indent 4 spaces width.

(defun dz/indent-spaces ()
  (interactive)
  (setq-local indent-tabs-mode nil) ;; Use space instead of tab.
  (dz/indent-setup 2))              ;; Indent 2 spaces width.
#+END_SRC

** Origami
#+BEGIN_SRC lisp :tangle yes
(use-package origami
  :defer 3
  :config (origami-mode))
#+END_SRC

** ialign
#+BEGIN_SRC lisp :tangle yes
(use-package ialign
  :defer 3)
#+END_SRC

** Relative line numbers
#+BEGIN_SRC lisp :tangle yes
(use-package linum-relative
  :hook (prog-mode . display-line-numbers-mode)
  :custom
  (linum-relative-backend        'display-line-numbers-mode)
  (linum-relative-current-symbol ""))
#+END_SRC

** Key chords
#+BEGIN_SRC lisp :tangle yes
(use-package key-chord
  :config
  (key-chord-mode 1)
  (setq key-chord-two-keys-delay 0.05)
  (key-chord-define-global "eu" 'evil-normal-state))
#+END_SRC

** Fix scrolling

#+BEGIN_SRC lisp :tangle yes
(setq
  scroll-conservatively 1000                     ;; Only 'jump' when moving this far
  scroll-margin         4                        ;; Scroll N lines to screen edge
  scroll-step           1                        ;; Keyboard scroll one line at a time
  
  mouse-wheel-scroll-amount '(6 ((shift) . 1))   ;; Mouse scroll N lines
  mouse-wheel-progressive-speed nil              ;; Don't accelerate scrolling
  redisplay-dont-pause t                         ;; Don't pause display on input
  
  ;; Always redraw immediately when scrolling, more responsive and doesn't hang!
  fast-but-imprecise-scrolling nil
  jit-lock-defer-time          0)
#+END_SRC

* Tools
** Terminal Emulator
#+BEGIN_SRC lisp :tangle yes
(defun @dz/vterm-init () 
  (setq mode-line-format       nil
        confirm-kill-processes nil
        hscroll-margin         0))

(defun dz/open-vterm () 
  (interactive)
  (split-window-vertically)
  (vterm-toggle))

(use-package vterm
  :defer 3
  :preface (setq vterm-install t)
  :commands vterm vterm-mode
  :hook (vterm-mode . @dz/vterm-init)
  :config  

  (use-package vterm-toggle
    :defer 3
    :bind ("C-c t" . #'vterm-toggle))

  ;; Once vterm is dead, the vterm buffer is useless.
  (setq vterm-kill-buffer-on-exit t)

  (defun +vterm-goto-insert-point-h ()
    "Go to the point we were at when we left insert mode."
    (when +vterm--insert-point
      (goto-char +vterm--insert-point)
      (setq-local +vterm--insert-point nil)))

  (defun +vterm-remember-insert-point-h ()
    "Remember point when leaving insert mode."
    (setq-local +vterm--insert-point (point)))
  
  ;; Restore the point's location when leaving and re-entering insert mode.
  (add-hook 'vterm-mode-hook
    (defun +vterm-init-remember-point-h ()
      (add-hook 'evil-insert-state-exit-hook #'+vterm-remember-insert-point-h nil t)
      (add-hook 'evil-insert-state-entry-hook #'+vterm-goto-insert-point-h nil t))))
#+END_SRC

** Treemacs
#+BEGIN_SRC lisp :tangle yes
(use-package treemacs
  :defer 3

  :config
  (use-package all-the-icons)
  (use-package lsp-treemacs)
  (use-package treemacs-projectile)
  (use-package treemacs-all-the-icons)

  (add-hook 'treemacs-mode-hook (lambda () (text-scale-decrease 2)))

  (treemacs-follow-mode t)
  (treemacs-filewatch-mode t)
  (treemacs-fringe-indicator-mode t)
  (treemacs-load-theme "all-the-icons")

  :custom
  (treemacs-deferred-git-apply-delay      0.5)
  (treemacs-directory-name-transformer    #'identity)
  (treemacs-display-in-side-window        t)
  (treemacs-eldoc-display                 t)
  (treemacs-file-event-delay              5000)
  (treemacs-file-extension-regex          treemacs-last-period-regex-value)
  (treemacs-file-follow-delay             0.2)
  (treemacs-file-name-transformer         #'identity)
  (treemacs-follow-after-init             t)
  (treemacs-git-command-pipe              "")
  (treemacs-goto-tag-strategy             'refetch-index)
  (treemacs-indentation                   2)
  (treemacs-indentation-string            " ")
  (treemacs-is-never-other-window         nil)
  (treemacs-max-git-entries               5000)
  (treemacs-missing-project-action        'ask)
  (treemacs-no-png-images                 nil)
  (treemacs-no-delete-other-windows       t)
  (treemacs-project-follow-cleanup        nil)
  (treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory))
  (treemacs-position                      'left)
  (treemacs-recenter-distance             0.1)
  (treemacs-recenter-after-file-follow    nil)
  (treemacs-recenter-after-tag-follow     nil)
  (treemacs-recenter-after-project-jump   'always)
  (treemacs-recenter-after-project-expand 'on-distance)
  (treemacs-show-cursor                   nil)
  (treemacs-show-hidden-files             t)
  (treemacs-silent-filewatch              nil)
  (treemacs-silent-refresh                nil)
  (treemacs-sorting                       'alphabetic-asc)
  (treemacs-space-between-root-nodes      t)
  (treemacs-tag-follow-cleanup            t)
  (treemacs-tag-follow-delay              1.5)
  (treemacs-user-mode-line-format         nil)
  (treemacs-width                         35))
#+END_SRC

** Undo Tree
#+BEGIN_SRC lisp :tangle yes
(use-package undo-tree
  :defer 3
  :after evil
  :config
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree))
#+END_SRC

** Magit
#+BEGIN_SRC lisp :tangle yes
(use-package magit
  :defer 3
  :bind (:map evil-normal-state-map
    ("SPC C-c" . magit-dispatch)))
#+END_SRC

** Git Gutter
#+BEGIN_SRC lisp :tangle yes
(use-package git-gutter
  :defer 3
  :config

  (use-package git-gutter-fringe
    :diminish git-gutter-mode
    :config

    ;; subtle diff indicators in the fringe 
    ;; places the git gutter outside the margins. 
    (setq-default fringes-outside-margins t) 
      ;; thin fringe bitmaps 
    (define-fringe-bitmap 'git-gutter-fr:added
      [224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224] nil nil 'center) 
    (define-fringe-bitmap 'git-gutter-fr:modified
      [224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224 
       224 224 224 224 224] nil nil 'center) 
    (define-fringe-bitmap 'git-gutter-fr:deleted 
      [0 0 0 0 0 0 0 0 0 0 0 0 0 128 192 224 240 248] nil nil 'center)) 

  (global-git-gutter-mode))
#+END_SRC

** Ivy
#+BEGIN_SRC lisp :tangle yes
(defun dz/find-file ()
  "Call `counsel-projectile-find-file' if `projectile-project-p', otherwise fallback to `counsel-find-files'."
  (interactive)
  (if (projectile-project-p)
      (counsel-projectile-find-file)
      (counsel-find-file)))
#+END_SRC

#+BEGIN_SRC lisp :tangle yes
(use-package ivy
  :custom
  (enable-recursive-minibuffers t)
  (ivy-height                   10)
  (ivy-initial-inputs-alist     nil)
  (ivy-count-format             "[%d/%d] ")
  (ivy-use-virtual-buffers      t)

  :config
  (ivy-mode 1)

  (use-package ivy-posframe
    :diminish ivy-posframe-mode
    :config
    (setq ivy-posframe-display-functions-alist
      '((t . ivy-posframe-display-at-frame-top-center)))
    :hook (ivy-mode . ivy-posframe-enable))

  (use-package swiper)

  (use-package counsel 
    :after evil
    :config (counsel-mode)
    :bind (:map evil-normal-state-map
            ("SPC SPC" . counsel-M-x)
            ("SPC C-p" . counsel-projectile-switch-project)
            ("C-p"     . dz/find-file)))

  (use-package projectile
    :config (projectile-mode)
    :custom
    (projectile-enable-caching     t)
    (projectile-completion-system 'ivy))

  (use-package counsel-projectile
    :after (counsel projectile))

  (ivy-posframe-mode) ;; for some reason ivy-posframe-mode only works when enabled from here

  (defun find-file-right (filename)
    (interactive)
    (split-window-right)
    (other-window 1)
    (find-file filename))

  (defun find-file-below (filename)
    (interactive)
    (split-window-below)
    (other-window 1)
    (find-file filename))

  (dolist (command '(counsel-projectile-find-file
                     counsel-find-file))
    (ivy-set-actions command
    '(("|" find-file-right "open right") 
      ("%" find-file-below "open below")))))
#+END_SRC

* Evil Mode
#+BEGIN_SRC lisp :tangle yes
(use-package evil
  :config (evil-mode)

  :custom
  (scroll-step                            1)
  (scroll-conservatively                  10000)
  (evil-search-module                     'evil-search)
  (evil-ex-complete-emacs-commands        nil)
  (evil-shift-round                       nil)
  (evil-vsplit-window-right               t)
  (evil-split-window-below                t)
  (evil-want-C-u-scroll                   t)
  (popup-use-optimized-column-computation nil)

  :config
  (use-package general
    :config (general-override-mode))

  (general-define-key
    :states '(insert)
      "TAB" 'tab-to-tab-stop)

  (general-define-key
    :states '(normal visual motion)
      "d" 'evil-backward-char
      "n" 'evil-forward-char
      "h" 'evil-next-line
      "t" 'evil-previous-line

      "s" 'evil-ex

      "j" 'evil-delete
      "k" 'evil-find-char-to

      "l" 'evil-search-next
      "L" 'evil-search-previous

      "D" 'evil-beginning-of-line
      "N" 'evil-end-of-line
      "H" (kbd "5h")
      "T" (kbd "5t")

      "C-d" 'evil-window-left
      "C-h" 'evil-window-down
      "C-t" 'evil-window-up
      "C-n" 'evil-window-right))
#+END_SRC

* Language Server
** lsp-mode
#+BEGIN_SRC lisp :tangle yes
(use-package lsp-mode
  :defer 3
  :commands lsp
  :bind (:map evil-normal-state-map
          ("g r" . lsp-find-references)
          ("g d" . lsp-find-definition)

          ("g D" . lsp-ui-peek-find-definitions)
          ("g R" . lsp-ui-peek-find-references)
          ("g I" . lsp-ui-peek-find-implementation)

          ("SPC s" . swiper-isearch))
  :custom (lsp-eldoc-hook nil)
  :hook ((typescript-mode 
          c++-mode 
          c-mode 
          java-mode
          latex-mode 
          python-mode) . lsp))
#+END_SRC

** lsp-ui
#+BEGIN_SRC lisp :tangle yes
;; disable annoying breadcrumbs
(setq lsp-headerline-breadcrumb-enable nil)

(use-package lsp-ui
  :commands lsp-ui-mode
  :custom

  ; lsp-ui-doc

  (lsp-ui-doc-enable              t)
  (lsp-ui-doc-position            'at-point)
  (lsp-ui-doc-border (face-foreground 'default))
  (lsp-ui-doc-header              t)
  (lsp-ui-doc-include-signature   nil)
  (lsp-ui-doc-max-width           120)
  (lsp-ui-doc-max-height          30)

  ; lsp-ui-sidebar
  (lsp-ui-sideline-enable         nil)

  ; lsp-ui-peek
  (lsp-ui-peek-enable             t)
  (lsp-ui-peek-peek-height        20)
  (lsp-ui-peek-list-width         50)
  (lsp-ui-peek-fontify            'on-demand))
#+END_SRC

** XRefs
#+BEGIN_SRC lisp :tangle yes
(use-package ivy-xref
  :defer 3
  :after ivy
  :custom
  (xref-show-definitions-function #'ivy-xref-show-defs)
  (xref-show-xrefs-function       #'ivy-xref-show-xrefs))
#+END_SRC

* Auto Complete
#+BEGIN_SRC lisp :tangle yes
(use-package company-lsp
  :commands company-lsp
  :config
  (push 'company-lsp company-backends)
  (global-company-mode)
  :custom
  (company-minimum-prefix-length     1)
  (company-idle-delay                0)
  (company-lsp-async                 t)
  (company-tooltip-align-annotations t))
#+END_SRC

#+BEGIN_SRC lisp :tangle yes
(use-package company-box
  :after company
  :diminish company-box-mode
  :hook (global-company-mode . company-box-mode)
  :custom
  (company-box-backends-colors       nil)
  (company-box-show-single-candidate t)
  (company-box-max-candidates        50))
#+END_SRC

To fix the alignment issues caused by =mixed-pitch-mode= in non-prog buffers we must use this package.
#+BEGIN_SRC lisp :tangle yes
(use-package company-posframe
  :after company
  :diminish company-posframe-mode
  :hook (global-company-mode . company-box-mode)
  :config
  (company-posframe-mode 1))
#+END_SRC

* Languages
** C++
#+BEGIN_SRC lisp :tangle yes
(use-package ccls
  :defer 3
  :config (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc)))
#+END_SRC

** Python
#+BEGIN_SRC lisp :tangle yes
(use-package lsp-python-ms
  :defer 3
  :init (setq lsp-python-ms-auto-install-server t))
#+END_SRC

** Scala
#+BEGIN_SRC lisp :tangle yes
(use-package scala-mode
  :defer 3
  :interpreter
    ("scala" . scala-mode))

(use-package sbt-mode
  :defer 3
  :commands sbt-start sbt-command
  :config
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map)
   (setq sbt:program-options '("-Dsbt.supershell=false")))

(use-package lsp-metals
  :defer 3
  :config (setq lsp-metals-treeview-show-when-views-received t))
#+END_SRC

** Golang
#+BEGIN_SRC lisp :tangle yes
(use-package go-mode
  :defer 3
  :mode "\\.go\\'"
  :bind (:map go-mode-map
         ("C-c C-n" . go-run))
  :hook ((go-mode     . lsp-deferred)
         (before-save . lsp-format-buffer)
         (before-save . lsp-organize-imports)))
#+END_SRC

#+BEGIN_SRC lisp :tangle yes
(use-package company-go
  :defer 3
  :after go-mode
  :custom
  (company-go-show-annotation t)
  :hook (go-mode .
            (lambda ()
              (set (make-local-variable 'company-backends) '(company-go)))))
#+END_SRC

#+BEGIN_SRC lisp :tangle yes
(use-package go-eldoc
  :defer 3
  :after go-mode
  :hook (go-mode . go-eldoc-setup))
#+END_SRC

#+BEGIN_SRC lisp :tangle yes
(use-package go-guru
  :defer 3
  :after go-mode
  :hook (go-mode . go-guru-hl-identifier-mode))
#+END_SRC

** Javascript/Typescript
#+BEGIN_SRC lisp :tangle yes
(use-package tide
  :mode "\\.ts\\'"
  :ensure t
  :after (typescript-mode company flycheck)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)))
#+END_SRC

** Web
#+BEGIN_SRC lisp :tangle yes
(use-package web-mode
  :config
  (setq web-mode-enable-current-element-highlight t)
  :mode ("\\.ts\\'" "\\.html?\\'" "\\.css?\\'" "\\.js\\'"))
#+END_SRC

#+BEGIN_SRC lisp :tangle yes
(use-package company-web 
  :defer 3 
  :after web-mode)
#+END_SRC

#+BEGIN_SRC lisp :tangle yes
(use-package css-mode 
  :defer 3)
#+END_SRC

*** Vue
#+BEGIN_SRC lisp :tangle yes
(use-package vue-mode
  :defer 3
  :config
  (add-hook 'mmm-mode-hook
            (lambda ()
              (set-face-background 'mmm-default-submode-face nil))))
#+END_SRC

*** Emmet
#+BEGIN_SRC lisp :tangle yes
(use-package emmet-mode
  :preface (defvar emmet-mode-keymap (make-sparse-keymap))
  :bind (:map emmet-mode-keymap
          ("C-TAB" . emmet-expand-line))
  :hook ((css-mode web-mode html-mode) . emmet-mode))
#+END_SRC

#+BEGIN_SRC lisp :tangle yes
(use-package web-mode
  :defer 3
  :mode ("\\.php\\'" "\\.html\\'")

  :config
  (defun my-web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset   2
          web-mode-css-indent-offset    2)

    (set (make-local-variable 'company-backends)
      '(company-css
        company-web-html
        company-yasnippet
        company-files)))

  (add-hook 'web-mode-hook 'prog-mode-hook)    
  (add-hook 'web-mode-hook 'my-web-mode-hook)    
  (add-hook 'web-mode-hook 'company-mode)    

  (add-hook 'web-mode-before-auto-complete-hooks
      '(lambda ()
       (let ((web-mode-cur-language
          (web-mode-language-at-pos)))
                 (if (string= web-mode-cur-language "php")
           (yas-activate-extra-mode 'php-mode)
           (yas-deactivate-extra-mode 'php-mode))
                 (if (string= web-mode-cur-language "css")
           (setq emmet-use-css-transform t)
           (setq emmet-use-css-transform nil))))))
#+END_SRC

* Org
#+BEGIN_SRC lisp :tangle yes
(defun dz/org-faces ()
  (require 'color)
  (set-face-attribute 'org-block-begin-line nil :slant 'italic)
  (set-face-attribute 'org-block-end-line nil :slant 'italic)
  (set-face-attribute 'org-block nil :background
                      (color-darken-name
                        (face-attribute 'default :background) 3)))
#+END_SRC

#+BEGIN_SRC lisp :tangle yes
(use-package org
  :defer 3
  :config

  (use-package ox-hugo 
    :after ox)

  (use-package ox-reveal
    :after ox)

  (use-package org-bullets 
    :hook (org-mode . org-bullets-mode))

  (setq org-log-done 'time) ;; mark done tasks with current time
  (electric-indent-mode) ;; remove annoying indent behaviour
  (require 'ox)

  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

  (defun +org-update-latex-preview-background-color (&rest _)
    (setq-default
     org-format-latex-options
     (plist-put org-format-latex-options
                :background
                (face-attribute (or (cadr (assq 'default face-remapping-alist))
                                    'default)
                                :background nil t))))

  (advice-add 'load-theme :after '+org-update-latex-preview-background-color)

  (setq org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  :custom (org-directory "~/org")

  :hook ((org-mode . org-indent-mode)
         (org-mode . flyspell-mode)
         (org-mode . dz/org-faces)))
#+END_SRC

* LaTeX
#+BEGIN_SRC lisp :tangle yes
(use-package company-auctex :defer 3)
(use-package company-math :defer 3)

;(add-hook 'latex-mode-hook 'TeX-fold-mode)
;(add-hook 'latex-mode-hook 'latex-math-mode)
;(add-hook 'LaTeX-mode-hook 'prettify-symbols-mode)
(add-hook 'latex-mode-hook (lambda ()
  (add-to-list 'org-latex-classes
               '("report"
                 "\\documentclass{report}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))

(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))
(add-hook 'pdf-view-mode-hook
          (lambda () (setq header-line-format nil)))

(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-source-correlate-start-server t)

;; Update PDF buffers after successful LaTeX runs
(add-hook 'TeX-after-compilation-finished-functions
           #'TeX-revert-document-buffer)
#+END_SRC

* Configuration Files
** Terraform
#+BEGIN_SRC lisp :tangle yes
(use-package terraform-mode
  :defer 3
  :mode ("\\.tf$" . terraform-mode)
  :diminish terraform-mode
  :config 
  (use-package company-terraform
    :defer 3
    :after company-mode
    :config (company-terraform-init)))
#+END_SRC

** Yaml
#+BEGIN_SRC lisp :tangle yes
(use-package yaml-mode
  :mode ("\\.yml$" . yaml-mode))
#+END_SRC

** Protobuf
#+BEGIN_SRC lisp :tangle yes
(use-package protobuf-mode
  :mode ("\\.pb$" . protobuf-mode))
#+END_SRC

** CMake
#+BEGIN_SRC lisp :tangle yes
(use-package cmake-mode
  :mode ("CMakeLists\\.txt\\'" . cmake-mode))
#+END_SRC

** Dockerfile
#+BEGIN_SRC lisp :tangle yes
(use-package dockerfile-mode
  :mode ("Dockerfile" . dockerfile-mode))
#+END_SRC

** Toml
#+BEGIN_SRC lisp :tangle yes
(use-package toml-mode
  :mode ("\\.toml$" . toml-mode))
#+END_SRC

* Spelling
#+BEGIN_SRC lisp :tangle yes
(use-package flycheck
  :defer 3
  :init (global-flycheck-mode)
  :diminish flycheck-mode
  :custom (flycheck-global-modes '(not org-mode)))
#+END_SRC

* Snippets
#+BEGIN_SRC lisp :tangle yes
(use-package yasnippet
  :defer 3
  :hook (after-init . yas-global-mode)
  :diminish yas-minor-mode
  :bind (:map yas-minor-mode-map
          ("TAB" . yas-expand))
  :custom (yas-prompt-functions '(yas-completing-prompt))
  :config
  (use-package yasnippet-snippets
    :defer 3
    :after yasnippet
    :custom (yas-snippet-dirs '("~/.emacs.d/snippets"))))

#+END_SRC

* Miscellaneous dz/functions
** Wrap org source code blocks
#+BEGIN_SRC lisp :tangle yes
(setq def-language "")

(defun dz/org-wrap-source ()
  (interactive)
  (let ((lang (read-string (format "Language [%s]: " def-language) nil nil def-language))
        (start (min (point) (mark)))
        (end (max (point) (mark))))
    (goto-char end)
    (unless (bolp)
      (newline))
    (insert "#+END_SRC\n")
    (goto-char start)
    (unless (bolp)
      (newline))
    (setq def-language lang)
    (insert (format "#+BEGIN_SRC %s\n" def-language))))

(define-key evil-visual-state-map (kbd "SPC w") 'dz/org-wrap-source)
#+END_SRC

** Open configuration
#+BEGIN_SRC lisp :tangle yes
(defun dz/open-config ()
  (interactive)
  (find-file "~/.emacs.d/init.org"))

(define-key evil-normal-state-map (kbd "SPC o c") 'dz/open-config)
(define-key evil-normal-state-map (kbd "SPC o a") (lambda () (find-file "~/org/agenda.org")))
#+END_SRC

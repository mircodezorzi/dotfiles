{
  "suggest.detailMaxLength": 10,
  "suggest.labelMaxLength": 50,
  "explorer.icon.enableNerdfont": true,
  "explorer.keyMappings": {
    "h": "nodeNext",
    "t": "nodePrev",

    "*": "toggleSelection",
    "<tab>": "actionMenu",

    "d": "collapse",
    "n": "expand",
    "H": ["toggleSelection", "normal:j"],
    "T": ["toggleSelection", "normal:k"],
    "gl": "expandRecursive",
    "gh": "collapseRecursive",
    "o": "expandOrCollapse",
    "<cr>": "open",
    "e": "open",
    "E": "openInVsplit",
    "k": "openInTab",
    "<bs>": "gotoParent",

    "y": "copyFilepath",
    "Y": "copyFilename",
    "c": "copyFile",
    "x": "cutFile",
    "p": "pasteFile",
    "j": "delete",
    "J": "deleteForever",

    "a": "addFile",
    "A": "addDirectory",
    "r": "rename",

    ".": "toggleHidden",
    "R": "refresh",

    "?": "help",
    "q": "quit",
    "X": "systemExecute",
    "gd": "listDrive",

    "f": "search",
    "F": "searchRecursive",

    "gf": "gotoSource:file",
    "gb": "gotoSource:buffer",

    "[[": "sourcePrev",
    "]]": "sourceNext",

    "[d": "diagnosticPrev",
    "]d": "diagnosticNext",

    "[c": "gitPrev",
    "]c": "gitNext",
    "<<": "gitStage",
    ">>": "gitUnstage"
  },
  "languageserver": {
    "ccls": {
      "command": "ccls",
      "filetypes": ["c", "cpp", "cuda"],
      "rootPatterns": [".ccls", "compile_commands.json", ".vim/", ".git/", ".hg/"],
      "initializationOptions": {
         "cache": {
           "directory": "/home/mirco/.ccls-cache"
         },
         "index": {
           "comments": 3
         }
       }
    },
    "golang": {
      "command": "gopls",
      "rootPatterns": ["go.mod", ".vim/", ".git/", ".hg/"],
      "filetypes": ["go"]
    },
    "haskell": {
      "command": "hie-wrapper",
      "rootPatterns": [
        ".stack.yaml",
        "cabal.config",
        "package.yaml"
      ],
      "filetypes": [
        "hs",
        "lhs",
        "haskell"
      ],
      "initializationOptions": {
        "languageServerHaskell": {
          "hlintOn": true
        }
      }
    }
  }
}
